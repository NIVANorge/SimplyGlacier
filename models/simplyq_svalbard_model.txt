


model("SimplyQ-Svalbard") {

	sc     : index_set("Subcatchment")
	patch  : index_set("Patch")  # This is for both land cover and elevation

	air      : compartment("Atmosphere",       sc, patch)
	snow_box : compartment("Snow box",         sc, patch)
	glacier  : compartment("Glacier",          sc, patch) # Maybe also aspect? Then would need to change aggregation_weight
	soil     : compartment("Soil",             sc, patch)
	deepgw   : compartment("Deep groundwater", sc)
	river    : compartment("River",            sc)
	
	water : quantity("Water")
	snow  : quantity("Snow (water equivalents)")
	ice   : quantity("Ice (water equivalents)")
	sed : quantity("Sediment")
	tracer : quantity("Tracer")
	
	temp   : property("Temperature")
	precip : property("Precipitation")
	flow   : property("Flow")
	pet    : property("Potential evapotranspiration")
	ddf    : property("Degree-day factor")
	e_fact : property("Erosion factor")
	glacial_runoff_soil : property ("glacial input to soil")
	is_glacier : property("Is glacier")
    #thaw_depth : property("Soil thaw depth")
    
    downhill   : connection("Downhill throughflow") @directed_graph { soil+ river } @no_cycles
	downhill_gl : connection("Downhill glacier") @directed_graph { glacier+ river } @no_cycles
	downstream : connection("Downstream") @directed_graph { river+ out } @no_cycles
	
	# These load from Mobius2/modules
	# If we need to make changes to these for this model we should make new copies in local_modules first and make the changes there.
	
	load("modules/pet.txt", module("Degree-day PET", air, soil, pet, temp))
	load("modules/simplyq.txt", module("SimplyQ land", soil, water, flow, pet, loc(deepgw.water), loc(downhill), constant(true)))
	load("modules/simplyq.txt", module("SimplyQ groundwater", deepgw, river, water, flow, loc(river.water), a_catch))
	load("modules/simplyq.txt", module("SimplyQ river trapezoid", river, water, flow, loc(downstream)))
	
	par_group("Catchment data", river) {
		a_catch    : par_real("Catchment area", [k m 2], 50, 1e-6, 7e6)
        elev_catch : par_real("Elevation of input met data", [m], 100, -420, 8848)
	}
	
	par_group("Patch data", soil) {
		rel_area : par_real("Relative area", [], 0.2, 0, 1)
	}
	
	# Load local modules
	load("local_modules/atmosphere.txt", module("ArcticAtmosphere", air, soil, temp, precip, elev_catch))
	
	load("local_modules/snow.txt", module("ArcticSnow", air, snow_box, snow, water, temp, precip, ddf, loc(glacier.water), loc(river.water)))
	
	load("local_modules/glacier.txt", module("SimplyGlacier", air, glacier, snow_box, soil, ice, snow, water, temp, precip, flow, is_glacier, glacial_runoff_soil, loc(downhill_gl)))
	
	load("local_modules/simplysed_glacier.txt", module("SimplySed", soil, river, glacier, water, sed, e_fact, is_glacier, glacial_runoff_soil, a_catch))
	
	load("local_modules/simplytracer_glacier.txt", module("SimplyTracer", soil, river, glacier, water, tracer, glacial_runoff_soil, a_catch))
	
	module("Extra things", version(0,0,0)){
		"whatever"
		
		Qmm : property("Specific discharge")
		var(river.water.Qmm, [m m, day -1], "Specific daily discharge") {
			river.water.flow/a_catch ->>
		} 
	}
	
	
	# Unit conversions when going from patches to reaches
	unit_conversion(glacier.water, river.water) { a_catch }
	unit_conversion(soil.water, river.water)  { a_catch }
	unit_conversion(deepgw.water, river.water) { a_catch }
    unit_conversion(snow_box.water, river.water) { a_catch }
	
    # Aggregations
	#aggregation_weight(snow_box, glacier) { rel_aspect }
	aggregation_weight(soil, soil)     { rel_area / rel_area[below] }
	aggregation_weight(glacier, glacier) { rel_area / rel_area[below] }
	aggregation_weight(glacier, river) { rel_area }
	aggregation_weight(soil, river)    { rel_area }
	aggregation_weight(soil, deepgw)   { rel_area }
    aggregation_weight(snow_box, river) { rel_area }
    
    # Setup solver
	sol : solver("Simply solver", inca_dascru, [2, hr], 1e-3)
	solve(sol, soil.water, deepgw.water, river.water, glacier.water)
	solve(sol, glacier.sed)
    # (Note snow stuff isn't on the solver, that's done discretely)
}